(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
exports.__esModule = true;
exports.hello = function () { return console.log('hello'); };

},{}],2:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var hello_1 = require("./components/hello");
var d = function () {
    hello_1.hello();
};
exports["default"] = d;

},{"./components/hello":1}],3:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var default_1 = require("./default");
default_1["default"]();
var hostname = document.location.hostname;
var isLocalhost = true;
if (/github/.test(hostname)) {
    isLocalhost = false;
}
console.log("isHost: " + isLocalhost);
fetch(isLocalhost ? '/data.json' : '/stream-links/data.json')
    .then(function (res) { return res.json(); })
    .then(function (json) {
    for (var c = 1; c <= 5; c += 1) {
        for (var r = 1; r <= 6; r += 1) {
            var grid = document.querySelector(".grid-" + c + "-" + r);
            grid.innerHTML = json[c][r].title;
            grid.setAttribute('href', "https://web.microsoftstream.com/browse?q=%23" + json[c][r].number);
        }
    }
})["catch"](function (error) { return console.error(error); });

},{"./default":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvdHlwZXNjcmlwdC9jb21wb25lbnRzL2hlbGxvLnRzIiwic3JjL3R5cGVzY3JpcHQvZGVmYXVsdC50cyIsInNyYy90eXBlc2NyaXB0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBYSxRQUFBLEtBQUssR0FBRyxjQUFNLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQTs7Ozs7QUNBL0MsNENBQTBDO0FBRTFDLElBQU0sQ0FBQyxHQUFHO0lBQ1IsYUFBSyxFQUFFLENBQUM7QUFDVixDQUFDLENBQUE7QUFFRCxxQkFBZSxDQUFDLENBQUM7Ozs7O0FDTmpCLHFDQUEwQjtBQUUxQixvQkFBQyxFQUFFLENBQUM7QUFFSSxJQUFBLHFDQUFRLENBQXVCO0FBQ3ZDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQztBQUN2QixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7SUFDM0IsV0FBVyxHQUFHLEtBQUssQ0FBQztDQUNyQjtBQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBVyxXQUFhLENBQUMsQ0FBQztBQUV0QyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDO0tBQzFELElBQUksQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBVixDQUFVLENBQUM7S0FDekIsSUFBSSxDQUFDLFVBQUMsSUFBSTtJQUNULEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDOUIsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFTLENBQUMsU0FBSSxDQUFHLENBQUMsQ0FBQztZQUN2RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDbEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsaURBQStDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFRLENBQUMsQ0FBQztTQUMvRjtLQUNGO0FBQ0gsQ0FBQyxDQUFDLENBQ0QsT0FBSyxDQUFBLENBQUMsVUFBQyxLQUFLLElBQUssT0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFwQixDQUFvQixDQUFDLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJleHBvcnQgY29uc3QgaGVsbG8gPSAoKSA9PiBjb25zb2xlLmxvZygnaGVsbG8nKSIsImltcG9ydCB7IGhlbGxvIH0gZnJvbSAnLi9jb21wb25lbnRzL2hlbGxvJ1xuXG5jb25zdCBkID0gKCkgPT4ge1xuICBoZWxsbygpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkO1xuIiwiaW1wb3J0IGQgZnJvbSAnLi9kZWZhdWx0JztcblxuZCgpO1xuXG5jb25zdCB7IGhvc3RuYW1lIH0gPSBkb2N1bWVudC5sb2NhdGlvbjtcbmxldCBpc0xvY2FsaG9zdCA9IHRydWU7XG5pZiAoL2dpdGh1Yi8udGVzdChob3N0bmFtZSkpIHtcbiAgaXNMb2NhbGhvc3QgPSBmYWxzZTtcbn1cbmNvbnNvbGUubG9nKGBpc0hvc3Q6ICR7aXNMb2NhbGhvc3R9YCk7XG5cbmZldGNoKGlzTG9jYWxob3N0ID8gJy9kYXRhLmpzb24nIDogJy9zdHJlYW0tbGlua3MvZGF0YS5qc29uJylcbiAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcbiAgLnRoZW4oKGpzb24pID0+IHtcbiAgICBmb3IgKGxldCBjID0gMTsgYyA8PSA1OyBjICs9IDEpIHtcbiAgICAgIGZvciAobGV0IHIgPSAxOyByIDw9IDY7IHIgKz0gMSkge1xuICAgICAgICBjb25zdCBncmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmdyaWQtJHtjfS0ke3J9YCk7XG4gICAgICAgIGdyaWQuaW5uZXJIVE1MID0ganNvbltjXVtyXS50aXRsZTtcbiAgICAgICAgZ3JpZC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBgaHR0cHM6Ly93ZWIubWljcm9zb2Z0c3RyZWFtLmNvbS9icm93c2U/cT0lMjMke2pzb25bY11bcl0ubnVtYmVyfWApO1xuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuIl19
